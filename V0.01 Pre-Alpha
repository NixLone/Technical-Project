import os
import sqlite3
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from PIL import Image, ImageTk
import re

try:
    import cv2
    import pytesseract
    OCR_AVAILABLE = True
except ImportError:
    OCR_AVAILABLE = False

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db_path = "test_tools.db"

# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ===
conn = sqlite3.connect(db_path)
cursor = conn.cursor()

# –û–±—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ö—Ä–∞–Ω–∏–º –≤ JSON-–ø–æ–¥–æ–±–Ω–æ–º –ø–æ–ª–µ
cursor.execute('''
CREATE TABLE IF NOT EXISTS tools (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    tool_code TEXT,
    tool_type TEXT,
    params TEXT,
    image_path TEXT
);
''')
conn.commit()

cursor.execute('SELECT COUNT(*) FROM tools')
if cursor.fetchone()[0] == 0:
    test_rows = [
        ("DGC-3143D2.5", "drill", "D=2.5;L=57;l1=30", None),
        ("WTE-4F1035", "endmill", "D=10;L=100;l1=50;l2=20;d=8", None),
        ("WUD-C25-3D19-SP05-63", "drill_body", "DC=25;L=133;L_work=75;l1=40", None)
    ]
    cursor.executemany('INSERT INTO tools (tool_code, tool_type, params, image_path) VALUES (?,?,?,?)', test_rows)
    conn.commit()

conn.close()

# === OCR-—Ñ—É–Ω–∫—Ü–∏—è ===
def read_drawing(image_path, tool_type="drill"):
    if not OCR_AVAILABLE:
        return []
    img = cv2.imread(image_path)
    if img is None:
        return []
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 180, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

    custom_config = r'--oem 3 --psm 6'
    text = pytesseract.image_to_string(thresh, config=custom_config)

    rows = []
    for line in text.splitlines():
        # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ split
        parts = line.split()
        if len(parts) > 1:
            code = parts[0]
            params = ";".join([f"p{i}={val}" for i, val in enumerate(parts[1:], start=1)])
            rows.append((code, tool_type, params, None))
    return rows

# === –í—Å—Ç–∞–≤–∫–∞ –≤ –ë–î ===
def insert_data(rows):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.executemany('''
        INSERT OR REPLACE INTO tools (tool_code, tool_type, params, image_path)
        VALUES (?, ?, ?, ?)
    ''', rows)
    conn.commit()
    conn.close()

# === –ü—Ä–∏–≤—è–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ ===
def add_image(tool_code, image_path):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute('UPDATE tools SET image_path=? WHERE tool_code=?', (image_path, tool_code))
    conn.commit()
    conn.close()

# === –ü–æ–∏—Å–∫ ===
def search_tools(query):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM tools WHERE tool_code LIKE ?', (f"%{query}%",))
    rows = cursor.fetchall()
    conn.close()
    return rows

# === GUI ===
class ToolApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Tool Card Generator")
        self.root.geometry("950x600")

        self.notebook = ttk.Notebook(root)
        self.notebook.pack(fill="both", expand=True)

        self.frame1 = ttk.Frame(self.notebook)
        self.notebook.add(self.frame1, text="üì• –ò–º–ø–æ—Ä—Ç —á–µ—Ä—Ç–µ–∂–∞")

        self.btn_load = ttk.Button(self.frame1, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å", command=self.load_image)
        self.btn_load.pack(pady=10)

        self.label_result = tk.Label(self.frame1, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã OCR –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å")
        self.label_result.pack()

        self.frame2 = ttk.Frame(self.notebook)
        self.notebook.add(self.frame2, text="üîç –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")

        self.entry_search = ttk.Entry(self.frame2, width=40)
        self.entry_search.pack(pady=10)
        self.btn_search = ttk.Button(self.frame2, text="–ù–∞–π—Ç–∏", command=self.search_tool)
        self.btn_search.pack()

        self.tree = ttk.Treeview(self.frame2, columns=("id","tool_code","type","params","image"), show="headings")
        for col in self.tree["columns"]:
            self.tree.heading(col, text=col)
        self.tree.pack(fill="both", expand=True)

        self.frame3 = ttk.Frame(self.notebook)
        self.notebook.add(self.frame3, text="üñº –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")

        self.entry_code = ttk.Entry(self.frame3, width=40)
        self.entry_code.pack(pady=10)
        self.btn_add_img = ttk.Button(self.frame3, text="–í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", command=self.add_image_to_tool)
        self.btn_add_img.pack()

    def load_image(self):
        path = filedialog.askopenfilename(filetypes=[("Images","*.png *.jpg *.jpeg")])
        if not path:
            return
        if not OCR_AVAILABLE:
            self.label_result.config(text="OCR –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ")
            return
        rows = read_drawing(path, "drill")
        if rows:
            insert_data(rows)
            self.label_result.config(text=f"–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫")
        else:
            self.label_result.config(text="–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")

    def search_tool(self):
        query = self.entry_search.get()
        rows = search_tools(query)
        for row in self.tree.get_children():
            self.tree.delete(row)
        for row in rows:
            self.tree.insert("", tk.END, values=row)

    def add_image_to_tool(self):
        code = self.entry_code.get()
        path = filedialog.askopenfilename(filetypes=[("Images","*.png *.jpg *.jpeg")])
        if not code or not path:
            messagebox.showerror("–û—à–∏–±–∫–∞","–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        add_image(code, path)
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è {code}")

if __name__ == "__main__":
    root = tk.Tk()
    app = ToolApp(root)
    root.mainloop()
